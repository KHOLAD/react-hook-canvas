{"version":3,"sources":["components/form/input.jsx","components/form/submit-button.jsx","components/form/form-container.jsx","components/form/validation.js","components/random.jsx","components/loader/loader.jsx","components/table.jsx","components/canvas/tensor.jsx","components/canvas/canvas.jsx","App.js","serviceWorker.js","index.js"],"names":["InputComponent","valueChange","invalid","onEnter","inputClasses","onKeyDown","event","key","onChange","target","value","className","join","type","placeholder","SubmitButtonComponent","disabled","onClick","pending","buttonClasses","ImageFormComponent","React","memo","onsubmit","useState","isValid","submitted","dirty","formState","setFormState","handleSubmit","useCallback","handleChanges","url","valid","RegExp","test","cat_images","RandomImageComponent","handleClick","Math","floor","random","length","role","LoadingComponent","PredictionTableComponent","headers","content","setTableCells","prediction","Object","keys","map","index","header","i","data","TensorPredictionComponent","imageData","loading","setLoading","result","setResult","setPending","handleResult","predictions","useEffect","a","mobilenet","model","classify","console","log","infer","print","probability","toUpperCase","toFixed","CORS_EVERYWHERE","CanvasImageComponent","imageUrl","canvasRef","useRef","image_container","Image","canvas","current","context","clearRect","crossOrigin","src","onload","wrh","width","height","new_width","new_height","drawImage","getImageData","x","y","ref","App","setImageUrl","setImageData","handleImageChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62fe39cc.chunk.js","sourcesContent":["import React from  'react';\n\nexport const InputComponent = ({valueChange, invalid, onEnter}) => {\n    const inputClasses = [\n        'bg-white',\n        'focus:outline-none',\n        'focus:outline-none',\n        'border',\n        'border-gray-300',\n        'rounded-lg',\n        'py-2',\n        'px-4',\n        'block',\n        'w-full',\n        'appearance-none',\n        'leading-normal',\n        `${invalid ? 'border-red-500' : ''}`\n    ];\n\n    return <input\n        onKeyDown={(event => event.key === 'Enter' ? onEnter() : null)}\n        onChange={({target}) => valueChange(target.value)}\n        className={inputClasses.join(' ')}\n        type=\"text\"\n        placeholder='Image url' />\n};\n","import React from 'react';\n\nexport const SubmitButtonComponent = ({disabled, onClick, pending}) => {\n    const buttonClasses = [\n        'mx-3',\n        'focus:outline-none',\n        'focus:outline-none',\n        'bg-transparent',\n        'hover:bg-blue-500',\n        'text-blue-700',\n        'font-semibold',\n        'hover:text-white',\n        'py-2',\n        'px-4',\n        'border',\n        'border-blue-500',\n        'hover:border-transparent',\n        'rounded',\n        `${disabled || pending ? 'opacity-50 cursor-not-allowed' : ''}`\n    ];\n\n    return <button\n        disabled={ disabled || pending }\n        onClick={ onClick }\n        className={ buttonClasses.join(' ') }>Submit</button>\n};\n","import React, { useState, useCallback } from 'react';\nimport { InputComponent } from \"./input\";\nimport { IsValidUrl } from \"./validation\";\nimport { SubmitButtonComponent } from \"./submit-button\";\n\nexport const ImageFormComponent = React.memo(({onsubmit}) => {\n    const [ formState, setFormState ] = useState({\n        value: null,\n        isValid: null,\n        submitted: false,\n        dirty: false\n    });\n\n    const handleSubmit = useCallback(() => {\n        setFormState({\n            ...formState,\n            submitted: true,\n            dirty: false\n        });\n        onsubmit(formState.value);\n    }, [formState, onsubmit]);\n\n    const handleChanges = useCallback((value) => {\n        setFormState({\n            ...formState,\n            value,\n            valid: IsValidUrl(value),\n            dirty: true\n        });\n    }, [formState]);\n\n    return (\n        <>\n            <div className=\"container flex\">\n                <InputComponent\n                    onEnter={ handleSubmit }\n                    invalid={ formState.value && !formState.valid }\n                    valueChange={ handleChanges } />\n\n                <SubmitButtonComponent\n                    onClick={ handleSubmit }\n                    disabled={ !formState.valid || (formState.submitted && !formState.dirty) } />\n            </div>\n        </>\n    );\n});\n","export const IsValidUrl = url => {\n    const pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n        '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n    return !!pattern.test(url);\n};\n","import React from \"react\";\n\nconst cat_images = [\n    'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fcreativepool.com%2Ffiles%2Fcandidate%2Fportfolio%2Ffull%2F1118418.jpg&f=1&nofb=1',\n    'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.pinimg.com%2Foriginals%2F0f%2F10%2Fbd%2F0f10bd1dbecaa2bfd33612bb04d99347.jpg&f=1&nofb=1',\n    'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.pinimg.com%2Foriginals%2F81%2F34%2Fbe%2F8134bec85c41d6ad60fd25d5b9d22e3c.jpg&f=1&nofb=1',\n    'https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fi.telegraph.co.uk%2Fmultimedia%2Farchive%2F01834%2Fcat-thumbs-up_1834999i.jpg&f=1&nofb=1',\n    'https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.redd.it%2F9ntqak56mqh21.jpg&f=1&nofb=1',\n    'https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fi.imgur.com%2FlCFGt7m.jpg&f=1&nofb=1'\n];\n\nexport const RandomImageComponent = ({handleClick}) => {\n\n  const onClick = () => {\n      handleClick(cat_images[Math.floor(Math.random() * cat_images.length)]);\n  };\n\n  return (\n      <div className=\"m-1 w-full text-center py-4 lg:px-4\">\n          <div onClick={ onClick }\n              className=\"cursor-pointer select-none p-2 bg-indigo-800 items-center text-indigo-100 leading-none lg:rounded-full flex lg:inline-flex\"\n              role=\"alert\">\n                    <span\n                        className=\"flex rounded-full bg-indigo-500 uppercase px-2 py-1 text-xs font-bold mr-3\">New</span>\n              <span className=\"font-semibold mr-2 text-left flex-auto\">Click here to use cool random image</span>\n          </div>\n      </div>\n  )\n};\n","import React from 'react';\nimport './loader.css';\n\nexport function LoadingComponent() {\n    return <div className=\"preloader m-5\"><div/></div>\n}\n","import React, { useCallback } from 'react';\n\nexport const PredictionTableComponent = React.memo(({headers, content}) => {\n\n    const setTableCells = useCallback((prediction) => {\n        return Object.keys(prediction).map((key, index) =>\n            <td key={index} className='border px-4 py-2'>{ prediction[key] }</td>\n        )\n    },[]);\n\n    return (\n        <table className=\"my-1 table-auto w-full\">\n            <thead>\n                <tr>\n                    { headers && headers.map((header, i) => <th key={i} className=\"text-left py-2\">{header}</th>) }\n                </tr>\n            </thead>\n            <tbody>\n                { content.map((data, i) => <tr key={i}>{ setTableCells(data) }</tr>) }\n            </tbody>\n        </table>\n    )\n});\n","import React, { useState, useEffect, useCallback } from 'react';\nimport {LoadingComponent} from \"../loader/loader\";\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport {PredictionTableComponent} from \"../table\";\n\nexport function TensorPredictionComponent({imageData}) {\n    const [loading, setLoading] = useState(true);\n    const [result, setResult] = useState([]);\n    const [pending, setPending] = useState(false);\n\n    const handleResult = useCallback(predictions => {\n        setResult(predictions);\n        setLoading(false);\n    }, []);\n\n    useEffect(() => {\n        if (!imageData) { return }\n\n        setPending(true);\n\n        (async () => {\n            // Load the model.\n            const model = await mobilenet.load();\n            // Classify the image.\n            const predictions = await model.classify(imageData);\n            console.log('Predictions:', predictions);\n            // Sets prediction results\n            handleResult(predictions);\n            // Get the Logs.\n            const logits = model.infer(imageData);\n            logits.print();\n            // Get the embedding.\n            const embedding = model.infer(imageData, true);\n            embedding.print();\n\n            setPending(false);\n        })()\n    }, [imageData, handleResult]);\n\n    return (\n        <>\n            { loading && <LoadingComponent /> }\n            {\n                !loading && result[0].className && result[0].probability &&\n                <div className={`my-5 px-6 py-4 rounded overflow-hidden shadow-lg ${pending ? 'opacity-50' : ''}`}>\n                    <div className=\"font-bold text-xl mb-2\">Result</div>\n                    <p className=\"text-gray-700 text-base\">\n                        {\n                            result[0].className.toUpperCase()\n                        } /\n                        Probability: {\n                            (result[0].probability * 100).toFixed(0) + \"%\"\n                        }\n                    </p>\n\n                    <PredictionTableComponent\n                        headers={['Class name', 'Probability']}\n                        content={result}\n                    />\n                </div>\n            }\n        </>\n    )\n}\n","import React, { useEffect, useRef } from 'react';\nconst CORS_EVERYWHERE = 'https://cors-anywhere.herokuapp.com/';\n\nexport function CanvasImageComponent({imageUrl, onChange}) {\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        const image_container = new Image();\n\n        const canvas = canvasRef.current;\n        const context = canvasRef.current['getContext'](\"2d\");\n        context.clearRect(0, 0, canvas['width'], canvas['height']);\n\n        image_container.crossOrigin = \"anonymous\";\n        image_container.src = CORS_EVERYWHERE + imageUrl;\n\n        image_container.onload = () => {\n            // Preview image\n            const wrh = image_container.width / image_container.height;\n\n            let new_width = canvas['width'];\n            let new_height = new_width / wrh;\n\n            if (new_height > canvas['height']) {\n                new_height = canvas['height'];\n                new_width = new_height * wrh;\n            }\n\n            context.drawImage(image_container, 0, 0, new_width , new_height);\n            // Emit image data\n            const imageData = context.getImageData(\n                image_container.x,\n                image_container.y,\n                image_container.width,\n                image_container.height\n            );\n\n            onChange(imageData);\n        };\n    }, [imageUrl, onChange]);\n\n    return <canvas width={1280} height={1280} ref={canvasRef} />;\n}\n\n","import React, {useCallback, useState} from 'react';\nimport './App.css';\nimport {ImageFormComponent} from \"./components/form/form-container\";\nimport {RandomImageComponent} from \"./components/random\";\nimport {TensorPredictionComponent} from \"./components/canvas/tensor\";\nimport {CanvasImageComponent} from \"./components/canvas/canvas\";\n\nfunction App() {\n    const [ imageUrl, setImageUrl ] = useState(null);\n    const [ imageData, setImageData ] = useState(null);\n\n    const handleImageChange = useCallback((imageData) => {\n        setImageData(imageData)\n    }, []);\n\n    const handleSubmit = useCallback((imageUrl) => {\n        setImageUrl(imageUrl)\n    }, []);\n\n    return (\n        <div className=\"m-10 flex flex-col items-center flex container mx-auto\">\n            <h1 className=\"m-8 font-bold\">Whats on the image?</h1>\n\n            <RandomImageComponent handleClick={ handleSubmit } />\n\n            <ImageFormComponent onsubmit={ handleSubmit } />\n            { imageUrl &&\n                <div className=\"container m-5\">\n                    <TensorPredictionComponent imageData={ imageData } />\n                    <CanvasImageComponent imageUrl={ imageUrl } onChange={ handleImageChange } />\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}