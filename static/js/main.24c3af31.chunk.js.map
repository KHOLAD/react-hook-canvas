{"version":3,"sources":["components/form/input.jsx","components/form/submit-button.jsx","components/form/form-container.jsx","components/form/validation.js","components/canvas/canvas.jsx","components/loader/loader.jsx","components/canvas/tensor.jsx","components/canvas/image-container.jsx","components/main-container.jsx","App.js","serviceWorker.js","index.js"],"names":["InputComponent","valueChange","invalid","inputClasses","onChange","target","value","className","join","type","placeholder","SubmitButtonComponent","disabled","onClick","pending","buttonClasses","ImageFormComponent","React","memo","onsubmit","useState","isValid","submitted","dirty","formState","setFormState","handleSubmit","useCallback","handleChanges","url","valid","RegExp","test","CORS_EVERYWHERE","CanvasImageComponent","imageUrl","canvasRef","useRef","useEffect","image_container","Image","canvas","current","context","clearRect","crossOrigin","src","onload","wrh","width","height","new_width","new_height","drawImage","imageData","getImageData","x","y","ref","LoadingComponent","TensorPredictionComponent","loading","setLoading","probability","result","setResult","handleResults","predictions","map","p","Math","round","reduce","acc","cur","a","mobilenet","model","classify","console","log","infer","print","toUpperCase","toFixed","CanvasImagesContainer","setImageData","handleImageChange","MainContainer","setImageUrl","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24c3af31.chunk.js","sourcesContent":["import React from  'react';\n\nexport const InputComponent = ({valueChange, invalid}) => {\n    const inputClasses = [\n        'bg-white',\n        'focus:outline-none',\n        'focus:outline-none',\n        'border',\n        'border-gray-300',\n        'rounded-lg',\n        'py-2',\n        'px-4',\n        'block',\n        'w-full',\n        'appearance-none',\n        'leading-normal',\n        `${invalid ? 'border-red-500' : ''}`\n    ];\n\n    return <input\n        onChange={({target}) => valueChange(target.value)}\n        className={inputClasses.join(' ')}\n        type=\"text\"\n        placeholder='Image url' />\n};\n","import React from 'react';\n\nexport const SubmitButtonComponent = ({disabled, onClick, pending}) => {\n    const buttonClasses = [\n        'mx-3',\n        'focus:outline-none',\n        'focus:outline-none',\n        'bg-transparent',\n        'hover:bg-blue-500',\n        'text-blue-700',\n        'font-semibold',\n        'hover:text-white',\n        'py-2',\n        'px-4',\n        'border',\n        'border-blue-500',\n        'hover:border-transparent',\n        'rounded',\n        `${disabled || pending ? 'opacity-50 cursor-not-allowed' : ''}`\n    ];\n\n    return <button disabled={disabled || pending} onClick={onClick} className={buttonClasses.join(' ')}>Submit</button>\n};\n","import React, { useState, useCallback } from 'react';\nimport { InputComponent } from \"./input\";\nimport { IsValidUrl } from \"./validation\";\nimport { SubmitButtonComponent } from \"./submit-button\";\n\nexport const ImageFormComponent = React.memo(({onsubmit}) => {\n    const [ formState, setFormState ] = useState({\n        value: null,\n        isValid: null,\n        submitted: false,\n        dirty: false\n    });\n\n    const handleSubmit = useCallback(() => {\n        setFormState({\n            ...formState,\n            submitted: true,\n            dirty: false\n        });\n        onsubmit(formState.value);\n    }, [formState, onsubmit]);\n\n    const handleChanges = useCallback((value) => {\n        setFormState({\n            ...formState,\n            value,\n            valid: IsValidUrl(value),\n            dirty: true\n        });\n    }, [formState]);\n\n    return (\n        <>\n            <div className=\"container flex\">\n                <InputComponent\n                    invalid={ formState.value && !formState.valid }\n                    valueChange={ handleChanges } />\n                <SubmitButtonComponent\n                    onClick={ handleSubmit }\n                    disabled={ !formState.valid || (formState.submitted && !formState.dirty) } />\n            </div>\n        </>\n    );\n});\n","export const IsValidUrl = url => {\n    const pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n        '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n    return !!pattern.test(url);\n};\n","import React, { useEffect, useRef } from 'react';\nconst CORS_EVERYWHERE = 'https://cors-anywhere.herokuapp.com/';\n\nexport function CanvasImageComponent({imageUrl, onChange}) {\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        const image_container = new Image();\n\n        const canvas = canvasRef.current;\n        const context = canvasRef.current['getContext'](\"2d\");\n        context.clearRect(0, 0, canvas['width'], canvas['height']);\n\n        image_container.crossOrigin = \"anonymous\";\n        image_container.src = CORS_EVERYWHERE + imageUrl;\n\n        image_container.onload = () => {\n            // Preview image\n            const wrh = image_container.width / image_container.height;\n\n            let new_width = canvas['width'];\n            let new_height = new_width / wrh;\n\n            if (new_height > canvas['height']) {\n                new_height = canvas['height'];\n                new_width = new_height * wrh;\n            }\n\n            context.drawImage(image_container, 0, 0, new_width , new_height);\n            // Emit image data\n            const imageData = context.getImageData(\n                image_container.x,\n                image_container.y,\n                image_container.width,\n                image_container.height\n            );\n\n            onChange(imageData);\n        };\n    }, [imageUrl, onChange]);\n\n    return <canvas width={1280} height={1280} ref={canvasRef} />;\n}\n\n","import React from 'react';\nimport './loader.css';\n\nexport function LoadingComponent() {\n    return <div className=\"preloader m-5\"><div/></div>\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport {LoadingComponent} from \"../loader/loader\";\nimport * as mobilenet from '@tensorflow-models/mobilenet';\n\nexport function TensorPredictionComponent({imageData}) {\n    const [loading, setLoading] = useState(true);\n    const [result, setResult] = useState({ className: null, probability: null });\n\n    const handleResults = useCallback(predictions => {\n        const result = predictions.map(p => ({\n            ...p, probability: Math.round(p.probability * 100) / 100\n        })).reduce((acc, cur) => (acc.probability > cur.probability) ? acc : cur);\n        setResult(result);\n        setLoading(false);\n    }, []);\n\n    useEffect(() => {\n        if (!imageData) { return }\n\n        (async () => {\n            // Load the model.\n            const model = await mobilenet.load();\n            // Classify the image.\n            const predictions = await model.classify(imageData);\n            console.log('Predictions:', predictions);\n            // Sets prediction results\n            handleResults(predictions);\n            // Get the Logs.\n            const logits = model.infer(imageData);\n            logits.print();\n            // Get the embedding.\n            const embedding = model.infer(imageData, true);\n            embedding.print();\n        })()\n    }, [imageData, handleResults]);\n\n    return (\n        <>\n            { loading && <LoadingComponent /> }\n            {\n                !loading && result.className && result.probability &&\n                <div className=\"my-5 px-6 py-4 rounded overflow-hidden shadow-lg\">\n                    <div className=\"font-bold text-xl mb-2\">Result</div>\n                    <p className=\"text-gray-700 text-base\">\n                        {\n                            result.className.toUpperCase()\n                        } /\n                        Probability: {\n                            (result.probability * 100).toFixed(0) + \"%\"\n                        }\n                    </p>\n                </div>\n            }\n        </>\n    )\n}\n","import React, { useState, useCallback }  from 'react';\nimport { CanvasImageComponent } from \"./canvas\";\nimport { TensorPredictionComponent } from \"./tensor\";\n\nexport const CanvasImagesContainer = React.memo(({imageUrl}) => {\n    const [imageData, setImageData] = useState(null);\n\n    const handleImageChange = useCallback((imageData) => {\n        setImageData(imageData)\n    }, []);\n\n    return (\n        <div className=\"container m-5\">\n            <TensorPredictionComponent imageData={ imageData } />\n            <CanvasImageComponent imageUrl={ imageUrl } onChange={ handleImageChange } />\n        </div>\n    )\n});\n","import React, { useState, useCallback } from 'react';\nimport { ImageFormComponent } from \"./form/form-container\";\nimport { CanvasImagesContainer } from \"./canvas/image-container\";\n\nexport const MainContainer = React.memo(() => {\n    const [ imageUrl, setImageUrl ] = useState(null);\n\n    const handleSubmit = useCallback((imageUrl) => {\n        setImageUrl(imageUrl)\n    }, []);\n\n    return (\n        <>\n            <ImageFormComponent onsubmit={ handleSubmit } />\n            { imageUrl && <CanvasImagesContainer imageUrl={ imageUrl } /> }\n        </>\n    )\n});\n","import React from 'react';\nimport './App.css';\nimport { MainContainer } from \"./components/main-container\";\n\nfunction App() {\n  return (\n    <div className=\"m-10 flex flex-col items-center flex container mx-auto\">\n        <h1 className=\"m-8 font-bold\">Whats on the image?</h1>\n        <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}